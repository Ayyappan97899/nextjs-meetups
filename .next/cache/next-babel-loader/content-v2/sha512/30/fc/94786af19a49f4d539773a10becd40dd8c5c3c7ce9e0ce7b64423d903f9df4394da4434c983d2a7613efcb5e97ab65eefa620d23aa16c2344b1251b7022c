{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\React project\\\\Nextjs-meet\\\\pages\\\\[meetupid]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nconst DetailPage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    title: props.singlemeetup.title,\n    image: props.singlemeetup.image,\n    address: props.singlemeetup.address,\n    description: props.singlemeetup.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\"mongodb+srv://nextjs:K0OcDeByhHYRW2N2@cluster0.3oihr.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetupdata = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetupdata.map(meetup => {\n      return {\n        params: {\n          meetupid: meetup._id.toString()\n        }\n      };\n    })\n  };\n};\nexport const getStaticProps = async context => {\n  const meetupid = context.params.meetupid;\n  const client = await MongoClient.connect(\"mongodb+srv://nextjs:K0OcDeByhHYRW2N2@cluster0.3oihr.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetupdata = await meetupCollection.findOne({\n    _id: ObjectId(meetupid)\n  });\n  client.close();\n  return {\n    props: {\n      singlemeetup: {\n        id: meetupdata._id,\n        title: meetupdata.title,\n        images: meetupdata.image,\n        address: meetupdata.address,\n        description: meetupdata.description\n      }\n    }\n  };\n};\nexport default DetailPage;","map":{"version":3,"sources":["G:/React project/Nextjs-meet/pages/[meetupid]/index.js"],"names":["MongoClient","ObjectId","MeetupDetails","DetailPage","props","singlemeetup","title","image","address","description","getStaticPaths","client","connect","db","meetupCollection","collection","meetupdata","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupid","toString","getStaticProps","context","findOne","id","images"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,aAAP,MAA0B,wCAA1B;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,YAAN,CAAmBC,KAD5B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,YAAN,CAAmBE,KAF5B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,YAAN,CAAmBG,OAH9B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,YAAN,CAAmBI;AAJlC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,sGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMC,UAAU,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA1B,EAAsCC,OAAtC,EAAzB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,UAAU,CAACO,GAAX,CAAgBC,MAAD,IAAY;AAChC,aAAO;AACLC,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AADJ;AADH,OAAP;AAKD,KANM;AAFF,GAAP;AAUD,CAnBM;AAqBP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,sGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMC,UAAU,GAAG,MAAMF,gBAAgB,CAACgB,OAAjB,CAAyB;AAChDZ,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD;AADmC,GAAzB,CAAzB;AAGAf,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE;AACZ0B,QAAAA,EAAE,EAAEf,UAAU,CAACE,GADH;AAEZZ,QAAAA,KAAK,EAAEU,UAAU,CAACV,KAFN;AAGZ0B,QAAAA,MAAM,EAAEhB,UAAU,CAACT,KAHP;AAIZC,QAAAA,OAAO,EAAEQ,UAAU,CAACR,OAJR;AAKZC,QAAAA,WAAW,EAAEO,UAAU,CAACP;AALZ;AADT;AADF,GAAP;AAWD,CAxBM;AA0BP,eAAeN,UAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\r\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\r\n\r\nconst DetailPage = (props) => {\r\n  return (\r\n    <MeetupDetails\r\n      title={props.singlemeetup.title}\r\n      image={props.singlemeetup.image}\r\n      address={props.singlemeetup.address}\r\n      description={props.singlemeetup.description}\r\n    />\r\n  );\r\n};\r\n\r\nexport const getStaticPaths = async () => {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://nextjs:K0OcDeByhHYRW2N2@cluster0.3oihr.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n  const meetupdata = await meetupCollection.find({}, { _id: 1 }).toArray();\r\n  client.close();\r\n  return {\r\n    fallback: false,\r\n    paths: meetupdata.map((meetup) => {\r\n      return {\r\n        params: {\r\n          meetupid: meetup._id.toString(),\r\n        },\r\n      };\r\n    }),\r\n  };\r\n};\r\n\r\nexport const getStaticProps = async (context) => {\r\n  const meetupid = context.params.meetupid;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://nextjs:K0OcDeByhHYRW2N2@cluster0.3oihr.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n  const meetupdata = await meetupCollection.findOne({\r\n    _id: ObjectId(meetupid),\r\n  });\r\n  client.close();\r\n  return {\r\n    props: {\r\n      singlemeetup: {\r\n        id: meetupdata._id,\r\n        title: meetupdata.title,\r\n        images: meetupdata.image,\r\n        address: meetupdata.address,\r\n        description: meetupdata.description,\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nexport default DetailPage;\r\n"]},"metadata":{},"sourceType":"module"}